Q: Which registers contain arguments to functions? For example, which register holds 13 in main's call to printf?
A: a0~a7. a2 holds 13 in printf.

Q: Where is the call to function f in the assembly code for main? Where is the call to g? (Hint: the compiler may inline functions.)
A: There is no call to function f. Expression `f(8) + 1` is eval during compiling (got `li a1, 12`).

Q: At what address is the function printf located?
A: 0x630

Q: What value is in the register ra just after the jalr to printf in main?
A: 0x38

Q: Run the following code.
    unsigned int i = 0x00646c72;
    printf("H%x Wo%s", 57616, &i);
What is the output? The output depends on that fact that the RISC-V is little-endian. If the RISC-V were instead big-endian what would you set i to in order to yield the same output? Would you need to change 57616 to a different value?
A: 'HE110 World', i = 0x726c6400, no need to change 57616.

Q: In the following code, what is going to be printed after 'y='? (note: the answer is not a specific value.) Why does this happen?
    printf("x=%d y=%d", 3);
A: the value previously stay in a2. In ISO-C, there is no way for a va-arg function to know how many arguments are pass into the function, so printf will indicate arg count through fmt-string and read a2 for its second '%d'.
      